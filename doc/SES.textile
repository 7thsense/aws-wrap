---
layout: default
title: SES
---

h2. SES

bq. Amazon Simple Email Service (Amazon SES) is a highly scalable and cost-effective bulk and transactional email-sending service for businesses and developers. ("documentation":http://aws.amazon.com/ses/)


h2. Setup

You need to have an AWS account (see "Get Started":{{site:url}}/doc/getstarted.html).
Before you can send email via Amazon SES, you need to verify that you own the domain or address from which youâ€™ll be sending email. To start the verification process, visit the "AWS Management Console":https://console.aws.amazon.com/ses/home.

h2. Managing Identities

An Identity is either an email address (like "foo+bar@example.com") or a domain name ("amazon.com").
When sending an email, SES will check that's the provided @Source@ belongs to your amazon account.
This library provides the API allowing you to manage indentities, including verifying email address or domain, or removing an Identity from the list of verified Identities.

h3. Verify email

You can verify an email identity by sending a confirmation email to that address.

bc. SES.verifyEmailIdentity("foo@example.com")

The owner or that mail is added to the list of verified identities when he has clicked the activation link provided in the sent email body.

h3. Verify domain

Verifies a domain.

bc. SES.verifyDomainIdentity("zenexity.com")

h3. List identities

The methods returns the list of all the identities, regardless of verification status.

bc. SES.listIdentities()

Note that the list returned does not necessarily contains the totality of the Identities.
Results are paginated, and you need to perform a new call each time you want to fetch a new page.

bc. SES.listIdentities(Some(nextToken)) // nextToken is the page token returned by the previous call.

h3. List identities verifications statuses

The following method will, given a list of identities, return the verification status and (for domain identities) the verification token for each identity.

bc. SES.identityVerificationAttributes(Identity("foo@example.com"))

h3. Delete Identity

To delete an @Identity@ fron the list of verified Identities, use the following method:

bc. SES.deleteIdentity(Identity("foo@example.com"))

h2. Sending emails

h3. Request Production Access

Before you can send emails to non-verified recipients, you need to request a production access using the the "AWS Management Console":https://console.aws.amazon.com/ses/home.

h3. Sending a simple email

Pass an @Email@ to @SES.send@ to send an email.
@subject@, @body@, @contentType@, @source@, and @destinations@ are required

bc. val mail = Email(
  subject = "Hello",
  body = Body(html = Some("<body>Hello World</body>")),
  source = "foo@bar.com",
  replyTo = "foo@bar.com" :: Nil,
  destinations = To(Simulators.SUCCESS) :: BCC(Simulators.SUCCESS) :: Nil
)
val eventuallyResult = SES.send(mail)

*You can only send email from verified email addresses and domains. If you have not requested production access to Amazon SES, you must also verify every recipient email address except for the recipients provided by the Amazon SES mailbox simulator.*

h3. Sending a RAW email

Amazon SES lets you send raw emails, specifying your own headers and content. It's useful to send multipart MIME emails.
The raw text of the message must comply with Internet email standards; otherwise, the message cannot be sent.

bc. val message =
    s"""From: "Meh" <foo@bar.com>
    |To: "Simulator" <jambon@domain.com>
    |Date: Fri, 17 Dec 2010 14:26:21 -0800
    |Subject: Hello
    |Message-ID: <61967230-7A45-4A9D-BEC9-87CBCF2211C9@example.com>
    |Accept-Language: en-US
    |Content-Language: en-US
    |Content-Type: text/plain; charset="utf-8"
    |Content-Transfer-Encoding: quoted-printable
    |MIME-Version: 1.0
    |
    |Hello, I hope you are having a good day.
    |
    |- Meh""".stripMargin
SES.sendRaw(message)

h2. DKIM signing

bq. Easy DKIM is a feature of Amazon SES that signs every message that you send from a verified email address or domain using a DKIM ("doc":http://docs.amazonwebservices.com/ses/latest/DeveloperGuide/DKIM.EasyDKIM.html) You can use the "AWS Management Console":https://console.aws.amazon.com/ses/home to configure Easy DKIM settings, and to enable or disable automatic DKIM signing for your email messages.

h3. Enabling or disabling DKIM signing

For email addresses (e.g., user@example.com), you can only enable Easy DKIM signing if the corresponding domain (e.g., example.com) has been set up for Easy DKIM.

bc. SES.setDKIMSigningStatus("zenexity.com", Statuses.ENABLED)

h3. Verify domain DKIM

bq. Returns a set of DKIM tokens for a domain. DKIM tokens are character strings that represent your domain's identity. Using these tokens, you will need to create DNS CNAME records that point to DKIM public keys hosted by Amazon SES. Amazon Web Services will eventually detect that you have updated your DNS records; this detection process may take up to 72 hours. Upon successful detection, Amazon SES will be able to DKIM-sign email originating from that domain.

bc. SES.verifyDomainDkim("zenexity.com")

h3. List DKIM attributes

bq. Returns the current status of Easy DKIM signing for an entity. For domain name identities, this action also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.

bc. SES.identityDkimAttributes(Identity("zenexity.com"))

h2. Feedback and Notifications

h3. Enabling SNS Notifications

SES can publish bounce and complaint notifications to an "SNS":/doc/sns.html topic for emails sent with a given Identity (email address or domain) as the source.

bc. SES.setIdentityNotificationTopic(
  "user@example.com",
  "arn:aws:sns:us-east-1:1234567890123456:mytopic",
  NotificationTypes.BOUNCE)

This example published a notification to "arn:aws:sns:us-east-1:1234567890123456:mytopic" each type an email sent from "user@example.com" when the destination does not exists.

h3. Listing notifications statuses

You can list the identities notification attributes for a list of verified identities.

bc. SES.identityNotificationAttributes(Identity("foo@example.com"))

h3. Forwarding feedback

Given an @Identity@, Amazon can forwards feedback notifications as email.
To enable or disable this feacture, call the following method:

bc. SES.setIdentityFeedbackForwardingStatus("user@example.com", Statuses.ENABLED)

h2. Statistics

The following methods can gather statistics about you SES account.

h3. Send quota

This method returns the user's current sending limits.

bc. val eventuallyQuota = SES.sendQuota()

It returns a @SendQuota@ containing:

- The maximum number of emails the user is allowed to send in a 24-hour interval
- The maximum number of emails the user is allowed to send per second.
- The number of emails sent during the previous 24 hours.

h3. Send statistics

This methods returns the user's sending statistics, groups by periods of 15 minutes.

bc. SES.sendStatistics()

It returns a @Seq[SendDataPoint]@, each @SendDataPoint@ representing 15 minutes of activity.
